const s=JSON.parse(`{"key":"v-2dd751d5","path":"/posts/iOS/source/YYMemoryCache.html","title":"YYMemoryCache 源码分析","lang":"zh-CN","frontmatter":{"title":"YYMemoryCache 源码分析","date":"2019-04-26T16:08:25.000Z","category":["iOS"],"tag":["iOS"],"description":"YYMemoryCache 源码分析 YYMemoryCache 是内存缓存，所以存取速度非常快，主要用到两种数据结构的 LRU 淘汰算法 LRU 淘汰算法 LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。 最常见的实现是使用一个链表保存缓存数据 【命中率】 当存在热点数据时，LRU 的效率很好，但偶发性的、周期性的批量操作会导致 LRU 命中率急剧下降，缓存污染情况比较严重。 Cache 的容量是有限的，当 Cache 的空间都被占满后，如果再次发生缓存失效，就必须选择一个缓存块来替换掉。LRU 法是依据各块使用的情况， 总是选择那个最长时间未被使用的块替换。这种方法比较好地反映了程序局部性规律 数据结构 双向链表 (Doubly Linked List) 哈希表 (Dictionary) 缓存操作 新数据插入到链表头部； 每当缓存命中（即缓存数据被访问），则将数据移到链表头部； 当链表满的时候，将链表尾部的数据丢弃。 分析图 bpM38.png YYMemoryCache.m 里的两个分类 链表节点 _YYLinkedMapNode @interface _YYLinkedMapNode : NSObject { @package // 指向前一个节点 __unsafe_unretained _YYLinkedMapNode *_prev; // retained by dic // 指向后一个节点 __unsafe_unretained _YYLinkedMapNode *_next; // retained by dic // 缓存key id _key; // 缓存对象 id _value; // 当前缓存内存开销 NSUInteger _cost; // 缓存时间 NSTimeInterval _time; } @end 链表 _YYLinkedMap @interface _YYLinkedMap : NSObject { @package // 用字典保存所有节点_YYLinkedMapNode (为什么不用oc字典?因为用CFMutableDictionaryRef效率高，毕竟基于c) CFMutableDictionaryRef _dic; // 总缓存开销 NSUInteger _totalCost; // 总缓存数量 NSUInteger _totalCount; // 链表头节点 _YYLinkedMapNode *_head; // 链表尾节点 _YYLinkedMapNode *_tail; // 是否在主线程上，异步释放 _YYLinkedMapNode对象 BOOL _releaseOnMainThread; // 是否异步释放 _YYLinkedMapNode对象 BOOL _releaseAsynchronously; } // 添加节点到链表头节点 - (void)insertNodeAtHead:(_YYLinkedMapNode *)node; // 移动当前节点到链表头节点 - (void)bringNodeToHead:(_YYLinkedMapNode *)node; // 移除链表节点 - (void)removeNode:(_YYLinkedMapNode *)node; // 移除链表尾节点(如果存在) - (_YYLinkedMapNode *)removeTailNode; // 移除所有缓存 - (void)removeAll; @end 链表插入、查找、替换操作实现 添加节点到链表头节点 // 添加节点到链表头节点 - (void)insertNodeAtHead:(_YYLinkedMapNode *)node { // 哈希表保存链表节点node CFDictionarySetValue(_dic, (__bridge const void *)(node-&gt;_key), (__bridge const void *)(node)); // 叠加该缓存开销到总内存开销 _totalCost += node-&gt;_cost; // 总缓存数+1 _totalCount++; if (_head) { // 存在链表头，取代当前表头 node-&gt;_next = _head; _head-&gt;_prev = node; // 重新赋值链表表头临时变量_head _head = node; } else { // 不存在链表头 _head = _tail = node; } } 移动当前节点到链表头节点 // 移动当前节点到链表头节点 - (void)bringNodeToHead:(_YYLinkedMapNode *)node { // 当前节点已是链表头节点 if (_head == node) return; if (_tail == node) { //**如果node是链表尾节点** // 把node指向的上一个节点赋值给链表尾节点 _tail = node-&gt;_prev; // 把链表尾节点指向的下一个节点赋值nil _tail-&gt;_next = nil; } else { //**如果node是非链表尾节点和链表头节点** // 此处比较难以理解：总结如下 // 链接当前节点上节点(node-&gt;_prev)到当前节点下节点（node-&gt;_next）的上索引(-&gt;_prev) node-&gt;_next-&gt;_prev = node-&gt;_prev; // 链接当前节点下节点(node-&gt;_next)到当前节点上节点（node-&gt;_prev）的下索引(-&gt;_next) node-&gt;_prev-&gt;_next = node-&gt;_next; // 此处操作等于将本节点上下索引分别赋值给右左节点上下索引，将上下节点链接 } // 把链表头节点赋值给node指向的下一个节点 node-&gt;_next = _head; // 把node指向的上一个节点赋值nil node-&gt;_prev = nil; // 把节点赋值给链表头节点的指向的上一个节点 _head-&gt;_prev = node; _head = node; } 移除节点 移除指定节点 // 移除节点 - (void)removeNode:(_YYLinkedMapNode *)node { // 从字典中移除node CFDictionaryRemoveValue(_dic, (__bridge const void *)(node-&gt;_key)); // 减掉总内存消耗 _totalCost -= node-&gt;_cost; // // 总缓存数-1 _totalCount--; // 重新连接链表(看图分析吧) if (node-&gt;_next) node-&gt;_next-&gt;_prev = node-&gt;_prev; if (node-&gt;_prev) node-&gt;_prev-&gt;_next = node-&gt;_next; if (_head == node) _head = node-&gt;_next; if (_tail == node) _tail = node-&gt;_prev; } 移除尾节点 // 移除尾节点(如果存在) - (_YYLinkedMapNode *)removeTailNode { if (!_tail) return nil; // 拷贝一份要删除的尾节点指针 _YYLinkedMapNode *tail = _tail; // 移除链表尾节点 CFDictionaryRemoveValue(_dic, (__bridge const void *)(_tail-&gt;_key)); // 减掉总内存消耗 _totalCost -= _tail-&gt;_cost; // 总缓存数-1 _totalCount--; if (_head == _tail) { // 清除节点，链表上已无节点了 _head = _tail = nil; } else { // 设倒数第二个节点为链表尾节点 _tail = _tail-&gt;_prev; _tail-&gt;_next = nil; } // 返回完tail后_tail将会释放 return tail; } 移除所有缓存 // 移除所有缓存 - (void)removeAll { // 清空内存开销与缓存数量 _totalCost = 0; _totalCount = 0; // 清空头尾节点 _head = nil; _tail = nil; if (CFDictionaryGetCount(_dic) &gt; 0) { // 拷贝一份字典 CFMutableDictionaryRef holder = _dic; // 重新分配新的空间 _dic = CFDictionaryCreateMutable(CFAllocatorGetDefault(), 0, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks); if (_releaseAsynchronously) { // 异步释放缓存 dispatch_queue_t queue = _releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue(); dispatch_async(queue, ^{ CFRelease(holder); // hold and release in specified queue }); } else if (_releaseOnMainThread &amp;&amp; !pthread_main_np()) { // 主线程上释放缓存 dispatch_async(dispatch_get_main_queue(), ^{ CFRelease(holder); // hold and release in specified queue }); } else { // 同步释放缓存 CFRelease(holder); } } }","head":[["meta",{"property":"og:url","content":"https://oragekk.github.io/posts/iOS/source/YYMemoryCache.html"}],["meta",{"property":"og:site_name","content":"Oragekk's Blog"}],["meta",{"property":"og:title","content":"YYMemoryCache 源码分析"}],["meta",{"property":"og:description","content":"YYMemoryCache 源码分析 YYMemoryCache 是内存缓存，所以存取速度非常快，主要用到两种数据结构的 LRU 淘汰算法 LRU 淘汰算法 LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。 最常见的实现是使用一个链表保存缓存数据 【命中率】 当存在热点数据时，LRU 的效率很好，但偶发性的、周期性的批量操作会导致 LRU 命中率急剧下降，缓存污染情况比较严重。 Cache 的容量是有限的，当 Cache 的空间都被占满后，如果再次发生缓存失效，就必须选择一个缓存块来替换掉。LRU 法是依据各块使用的情况， 总是选择那个最长时间未被使用的块替换。这种方法比较好地反映了程序局部性规律 数据结构 双向链表 (Doubly Linked List) 哈希表 (Dictionary) 缓存操作 新数据插入到链表头部； 每当缓存命中（即缓存数据被访问），则将数据移到链表头部； 当链表满的时候，将链表尾部的数据丢弃。 分析图 bpM38.png YYMemoryCache.m 里的两个分类 链表节点 _YYLinkedMapNode @interface _YYLinkedMapNode : NSObject { @package // 指向前一个节点 __unsafe_unretained _YYLinkedMapNode *_prev; // retained by dic // 指向后一个节点 __unsafe_unretained _YYLinkedMapNode *_next; // retained by dic // 缓存key id _key; // 缓存对象 id _value; // 当前缓存内存开销 NSUInteger _cost; // 缓存时间 NSTimeInterval _time; } @end 链表 _YYLinkedMap @interface _YYLinkedMap : NSObject { @package // 用字典保存所有节点_YYLinkedMapNode (为什么不用oc字典?因为用CFMutableDictionaryRef效率高，毕竟基于c) CFMutableDictionaryRef _dic; // 总缓存开销 NSUInteger _totalCost; // 总缓存数量 NSUInteger _totalCount; // 链表头节点 _YYLinkedMapNode *_head; // 链表尾节点 _YYLinkedMapNode *_tail; // 是否在主线程上，异步释放 _YYLinkedMapNode对象 BOOL _releaseOnMainThread; // 是否异步释放 _YYLinkedMapNode对象 BOOL _releaseAsynchronously; } // 添加节点到链表头节点 - (void)insertNodeAtHead:(_YYLinkedMapNode *)node; // 移动当前节点到链表头节点 - (void)bringNodeToHead:(_YYLinkedMapNode *)node; // 移除链表节点 - (void)removeNode:(_YYLinkedMapNode *)node; // 移除链表尾节点(如果存在) - (_YYLinkedMapNode *)removeTailNode; // 移除所有缓存 - (void)removeAll; @end 链表插入、查找、替换操作实现 添加节点到链表头节点 // 添加节点到链表头节点 - (void)insertNodeAtHead:(_YYLinkedMapNode *)node { // 哈希表保存链表节点node CFDictionarySetValue(_dic, (__bridge const void *)(node-&gt;_key), (__bridge const void *)(node)); // 叠加该缓存开销到总内存开销 _totalCost += node-&gt;_cost; // 总缓存数+1 _totalCount++; if (_head) { // 存在链表头，取代当前表头 node-&gt;_next = _head; _head-&gt;_prev = node; // 重新赋值链表表头临时变量_head _head = node; } else { // 不存在链表头 _head = _tail = node; } } 移动当前节点到链表头节点 // 移动当前节点到链表头节点 - (void)bringNodeToHead:(_YYLinkedMapNode *)node { // 当前节点已是链表头节点 if (_head == node) return; if (_tail == node) { //**如果node是链表尾节点** // 把node指向的上一个节点赋值给链表尾节点 _tail = node-&gt;_prev; // 把链表尾节点指向的下一个节点赋值nil _tail-&gt;_next = nil; } else { //**如果node是非链表尾节点和链表头节点** // 此处比较难以理解：总结如下 // 链接当前节点上节点(node-&gt;_prev)到当前节点下节点（node-&gt;_next）的上索引(-&gt;_prev) node-&gt;_next-&gt;_prev = node-&gt;_prev; // 链接当前节点下节点(node-&gt;_next)到当前节点上节点（node-&gt;_prev）的下索引(-&gt;_next) node-&gt;_prev-&gt;_next = node-&gt;_next; // 此处操作等于将本节点上下索引分别赋值给右左节点上下索引，将上下节点链接 } // 把链表头节点赋值给node指向的下一个节点 node-&gt;_next = _head; // 把node指向的上一个节点赋值nil node-&gt;_prev = nil; // 把节点赋值给链表头节点的指向的上一个节点 _head-&gt;_prev = node; _head = node; } 移除节点 移除指定节点 // 移除节点 - (void)removeNode:(_YYLinkedMapNode *)node { // 从字典中移除node CFDictionaryRemoveValue(_dic, (__bridge const void *)(node-&gt;_key)); // 减掉总内存消耗 _totalCost -= node-&gt;_cost; // // 总缓存数-1 _totalCount--; // 重新连接链表(看图分析吧) if (node-&gt;_next) node-&gt;_next-&gt;_prev = node-&gt;_prev; if (node-&gt;_prev) node-&gt;_prev-&gt;_next = node-&gt;_next; if (_head == node) _head = node-&gt;_next; if (_tail == node) _tail = node-&gt;_prev; } 移除尾节点 // 移除尾节点(如果存在) - (_YYLinkedMapNode *)removeTailNode { if (!_tail) return nil; // 拷贝一份要删除的尾节点指针 _YYLinkedMapNode *tail = _tail; // 移除链表尾节点 CFDictionaryRemoveValue(_dic, (__bridge const void *)(_tail-&gt;_key)); // 减掉总内存消耗 _totalCost -= _tail-&gt;_cost; // 总缓存数-1 _totalCount--; if (_head == _tail) { // 清除节点，链表上已无节点了 _head = _tail = nil; } else { // 设倒数第二个节点为链表尾节点 _tail = _tail-&gt;_prev; _tail-&gt;_next = nil; } // 返回完tail后_tail将会释放 return tail; } 移除所有缓存 // 移除所有缓存 - (void)removeAll { // 清空内存开销与缓存数量 _totalCost = 0; _totalCount = 0; // 清空头尾节点 _head = nil; _tail = nil; if (CFDictionaryGetCount(_dic) &gt; 0) { // 拷贝一份字典 CFMutableDictionaryRef holder = _dic; // 重新分配新的空间 _dic = CFDictionaryCreateMutable(CFAllocatorGetDefault(), 0, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks); if (_releaseAsynchronously) { // 异步释放缓存 dispatch_queue_t queue = _releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue(); dispatch_async(queue, ^{ CFRelease(holder); // hold and release in specified queue }); } else if (_releaseOnMainThread &amp;&amp; !pthread_main_np()) { // 主线程上释放缓存 dispatch_async(dispatch_get_main_queue(), ^{ CFRelease(holder); // hold and release in specified queue }); } else { // 同步释放缓存 CFRelease(holder); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-10T06:30:41.000Z"}],["meta",{"property":"article:tag","content":"iOS"}],["meta",{"property":"article:published_time","content":"2019-04-26T16:08:25.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-10T06:30:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"YYMemoryCache 源码分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-04-26T16:08:25.000Z\\",\\"dateModified\\":\\"2023-03-10T06:30:41.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1678429841000,"updatedTime":1678429841000,"contributors":[{"name":"huangkun","email":"huangkun@tonshow.cn","commits":1}]},"readingTime":{"minutes":4.57,"words":1371},"filePathRelative":"posts/iOS/source/YYMemoryCache.md","localizedDate":"2019年4月26日","excerpt":"<h1> YYMemoryCache 源码分析</h1>\\n<h4> YYMemoryCache 是内存缓存，所以存取速度非常快，主要用到两种数据结构的 LRU 淘汰算法</h4>\\n<ol>\\n<li>\\n<p>LRU 淘汰算法</p>\\n<blockquote>\\n<p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p>\\n<p>最常见的实现是使用一个链表保存缓存数据</p>\\n<p>【命中率】</p>\\n<p>当存在热点数据时，LRU 的效率很好，但偶发性的、周期性的批量操作会导致 LRU 命中率急剧下降，缓存污染情况比较严重。</p>\\n<p>Cache 的容量是有限的，当 Cache 的空间都被占满后，如果再次发生缓存失效，就必须选择一个缓存块来替换掉。LRU 法是依据各块使用的情况， 总是选择那个最长时间未被使用的块替换。这种方法比较好地反映了程序局部性规律</p>\\n</blockquote>\\n</li>\\n<li>\\n<p>数据结构</p>\\n<ul>\\n<li>双向链表 (Doubly Linked List)</li>\\n<li>哈希表 (Dictionary)</li>\\n</ul>\\n</li>\\n<li>\\n<p>缓存操作</p>\\n<ul>\\n<li>新数据插入到链表头部；</li>\\n<li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</li>\\n<li>当链表满的时候，将链表尾部的数据丢弃。</li>\\n</ul>\\n</li>\\n<li>\\n<p>分析图</p>\\n<figure><a href=\\"https://cuntuku.com/image/bpM38\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://storage6.cuntuku.com/2019/04/27/bpM38.png\\" alt=\\"bpM38.png\\" tabindex=\\"0\\" loading=\\"lazy\\"></a><figcaption>bpM38.png</figcaption></figure>\\n</li>\\n<li>\\n<p>YYMemoryCache.m 里的两个分类</p>\\n<ol>\\n<li>\\n<p>链表节点 <code>_YYLinkedMapNode</code></p>\\n<div class=\\"language-objc line-numbers-mode\\" data-ext=\\"objc\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">@interface</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_YYLinkedMapNode</span><span style=\\"color: #ABB2BF\\"> : </span><span style=\\"color: #E5C07B\\">NSObject</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">@package</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 指向前一个节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    __unsafe_unretained _YYLinkedMapNode *_prev; </span><span style=\\"color: #7F848E; font-style: italic\\">// retained by dic</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 指向后一个节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    __unsafe_unretained _YYLinkedMapNode *_next; </span><span style=\\"color: #7F848E; font-style: italic\\">// retained by dic</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 缓存key</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">id</span><span style=\\"color: #ABB2BF\\"> _key;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 缓存对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">id</span><span style=\\"color: #ABB2BF\\"> _value;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 当前缓存内存开销</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    NSUInteger _cost;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 缓存时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    NSTimeInterval _time;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">@end</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>链表 <code>_YYLinkedMap</code></p>\\n<div class=\\"language-objc line-numbers-mode\\" data-ext=\\"objc\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">@interface</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_YYLinkedMap</span><span style=\\"color: #ABB2BF\\"> : </span><span style=\\"color: #E5C07B\\">NSObject</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">@package</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 用字典保存所有节点_YYLinkedMapNode (为什么不用oc字典?因为用CFMutableDictionaryRef效率高，毕竟基于c)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    CFMutableDictionaryRef _dic;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 总缓存开销</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    NSUInteger _totalCost;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 总缓存数量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    NSUInteger _totalCount;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 链表头节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _YYLinkedMapNode *_head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 链表尾节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _YYLinkedMapNode *_tail;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 是否在主线程上，异步释放 _YYLinkedMapNode对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">BOOL</span><span style=\\"color: #ABB2BF\\"> _releaseOnMainThread;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 是否异步释放 _YYLinkedMapNode对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">BOOL</span><span style=\\"color: #ABB2BF\\"> _releaseAsynchronously;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 添加节点到链表头节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #61AFEF\\">insertNodeAtHead:</span><span style=\\"color: #ABB2BF\\">(_YYLinkedMapNode *)</span><span style=\\"color: #ABB2BF; font-style: italic\\">node</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 移动当前节点到链表头节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #61AFEF\\">bringNodeToHead:</span><span style=\\"color: #ABB2BF\\">(_YYLinkedMapNode *)</span><span style=\\"color: #ABB2BF; font-style: italic\\">node</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 移除链表节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #61AFEF\\">removeNode:</span><span style=\\"color: #ABB2BF\\">(_YYLinkedMapNode *)</span><span style=\\"color: #ABB2BF; font-style: italic\\">node</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 移除链表尾节点(如果存在)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (_YYLinkedMapNode *)</span><span style=\\"color: #61AFEF\\">removeTailNode</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 移除所有缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #61AFEF\\">removeAll</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">@end</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>\\n</li>\\n<li>\\n<p>链表插入、查找、替换操作实现</p>\\n<ul>\\n<li>\\n<p>添加节点到链表头节点</p>\\n<div class=\\"language-objc line-numbers-mode\\" data-ext=\\"objc\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 添加节点到链表头节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">)insertNodeAtHead:(_YYLinkedMapNode *)node {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 哈希表保存链表节点node</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">CFDictionarySetValue</span><span style=\\"color: #ABB2BF\\">(_dic, (__bridge </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> *)(</span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_key</span><span style=\\"color: #ABB2BF\\">), (__bridge </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> *)(node));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 叠加该缓存开销到总内存开销</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _totalCost </span><span style=\\"color: #C678DD\\">+=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_cost</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 总缓存数+1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _totalCount</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (_head) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 存在链表头，取代当前表头</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> _head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">_head</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> node;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 重新赋值链表表头临时变量_head</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        _head </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> node;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 不存在链表头</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        _head </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> _tail </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> node;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><figure><img src=\\"https://upload-images.jianshu.io/upload_images/295346-1cb03d629ecbf2fa.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n</li>\\n<li>\\n<p>移动当前节点到链表头节点</p>\\n<div class=\\"language-objc line-numbers-mode\\" data-ext=\\"objc\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 移动当前节点到链表头节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">)bringNodeToHead:(_YYLinkedMapNode *)node {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 当前节点已是链表头节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (_head </span><span style=\\"color: #56B6C2\\">==</span><span style=\\"color: #ABB2BF\\"> node) </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (_tail </span><span style=\\"color: #56B6C2\\">==</span><span style=\\"color: #ABB2BF\\"> node) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">//**如果node是链表尾节点**</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 把node指向的上一个节点赋值给链表尾节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        _tail </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 把链表尾节点指向的下一个节点赋值nil</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">_tail</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nil</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">//**如果node是非链表尾节点和链表头节点**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 此处比较难以理解：总结如下</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 链接当前节点上节点(node-&gt;_prev)到当前节点下节点（node-&gt;_next）的上索引(-&gt;_prev)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E5C07B\\">_next</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 链接当前节点下节点(node-&gt;_next)到当前节点上节点（node-&gt;_prev）的下索引(-&gt;_next)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E5C07B\\">_prev</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 此处操作等于将本节点上下索引分别赋值给右左节点上下索引，将上下节点链接</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 把链表头节点赋值给node指向的下一个节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> _head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 把node指向的上一个节点赋值nil</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nil</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 把节点赋值给链表头节点的指向的上一个节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">_head</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> node;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _head </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> node;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><figure><img src=\\"https://upload-images.jianshu.io/upload_images/295346-682e8396c2d9e092.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n</li>\\n<li>\\n<p>移除节点</p>\\n<ul>\\n<li>\\n<p>移除指定节点</p>\\n<div class=\\"language-objc line-numbers-mode\\" data-ext=\\"objc\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 移除节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">)removeNode:(_YYLinkedMapNode *)node {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 从字典中移除node</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">CFDictionaryRemoveValue</span><span style=\\"color: #ABB2BF\\">(_dic, (__bridge </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> *)(</span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_key</span><span style=\\"color: #ABB2BF\\">));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 减掉总内存消耗</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _totalCost </span><span style=\\"color: #C678DD\\">-=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_cost</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// // 总缓存数-1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _totalCount</span><span style=\\"color: #56B6C2\\">--</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 重新连接链表(看图分析吧)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E5C07B\\">_next</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E5C07B\\">_prev</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (_head </span><span style=\\"color: #56B6C2\\">==</span><span style=\\"color: #ABB2BF\\"> node) _head </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (_tail </span><span style=\\"color: #56B6C2\\">==</span><span style=\\"color: #ABB2BF\\"> node) _tail </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">node</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>移除尾节点</p>\\n<div class=\\"language-objc line-numbers-mode\\" data-ext=\\"objc\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 移除尾节点(如果存在)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (_YYLinkedMapNode *)removeTailNode {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #ABB2BF\\">_tail) </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nil</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 拷贝一份要删除的尾节点指针</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _YYLinkedMapNode *tail </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> _tail;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 移除链表尾节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">CFDictionaryRemoveValue</span><span style=\\"color: #ABB2BF\\">(_dic, (__bridge </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> *)(</span><span style=\\"color: #E5C07B\\">_tail</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_key</span><span style=\\"color: #ABB2BF\\">));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 减掉总内存消耗</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _totalCost </span><span style=\\"color: #C678DD\\">-=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_tail</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_cost</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 总缓存数-1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _totalCount</span><span style=\\"color: #56B6C2\\">--</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (_head </span><span style=\\"color: #56B6C2\\">==</span><span style=\\"color: #ABB2BF\\"> _tail) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 清除节点，链表上已无节点了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        _head </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> _tail </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nil</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 设倒数第二个节点为链表尾节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        _tail </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_tail</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_prev</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">_tail</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nil</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 返回完tail后_tail将会释放</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> tail;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>移除所有缓存</p>\\n<div class=\\"language-objc line-numbers-mode\\" data-ext=\\"objc\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 移除所有缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">- (</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">)removeAll {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 清空内存开销与缓存数量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _totalCost </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _totalCount </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 清空头尾节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _head </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nil</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    _tail </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nil</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #61AFEF\\">CFDictionaryGetCount</span><span style=\\"color: #ABB2BF\\">(_dic) </span><span style=\\"color: #56B6C2\\">&gt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 拷贝一份字典</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        CFMutableDictionaryRef holder </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> _dic;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 重新分配新的空间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        _dic </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">CFDictionaryCreateMutable</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">CFAllocatorGetDefault</span><span style=\\"color: #ABB2BF\\">(), </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">, &amp;</span><span style=\\"color: #D19A66\\">kCFTypeDictionaryKeyCallBacks</span><span style=\\"color: #ABB2BF\\">, &amp;</span><span style=\\"color: #D19A66\\">kCFTypeDictionaryValueCallBacks</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (_releaseAsynchronously) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #7F848E; font-style: italic\\">// 异步释放缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            dispatch_queue_t queue </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> _releaseOnMainThread </span><span style=\\"color: #C678DD\\">?</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">dispatch_get_main_queue</span><span style=\\"color: #ABB2BF\\">() </span><span style=\\"color: #C678DD\\">:</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">YYMemoryCacheGetReleaseQueue</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #61AFEF\\">dispatch_async</span><span style=\\"color: #ABB2BF\\">(queue, ^{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                </span><span style=\\"color: #61AFEF\\">CFRelease</span><span style=\\"color: #ABB2BF\\">(holder); </span><span style=\\"color: #7F848E; font-style: italic\\">// hold and release in specified queue</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (_releaseOnMainThread </span><span style=\\"color: #56B6C2\\">&amp;&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #61AFEF\\">pthread_main_np</span><span style=\\"color: #ABB2BF\\">()) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #7F848E; font-style: italic\\">// 主线程上释放缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #61AFEF\\">dispatch_async</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">dispatch_get_main_queue</span><span style=\\"color: #ABB2BF\\">(), ^{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                </span><span style=\\"color: #61AFEF\\">CFRelease</span><span style=\\"color: #ABB2BF\\">(holder); </span><span style=\\"color: #7F848E; font-style: italic\\">// hold and release in specified queue</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #7F848E; font-style: italic\\">// 同步释放缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #61AFEF\\">CFRelease</span><span style=\\"color: #ABB2BF\\">(holder);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ol>","copyright":{"author":"Oragekk","license":"MIT"},"autoDesc":true}`);export{s as data};
