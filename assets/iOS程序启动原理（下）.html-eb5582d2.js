import{_ as i,r as n,o as t,c as l,a as e,d as o,w as s,b as p,f as c}from"./app-d083d91b.js";const r={},_=e("blockquote",null,[e("p",null,"接上篇")],-1),d=e("p",null,"下图是一个 iOS 程序启动的完整过程",-1),u=e("img",{src:"https://upload-images.jianshu.io/upload_images/2076247-1f1b30ddcfcd7ef3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240",referrerPolicy:"no-referrer",alt:"图"},null,-1),g=e("p",null,"main 函数中执行了一个 UIApplicationMain 这个函数.",-1),m=e("pre",null,[e("code",null,`  int main(int argc, char * argv[])
  {    
    @autoreleasepool {        
      return UIApplicationMain(argc, argv, nil, NSStringFromClass([JNAppDelegate class]));    
    }
   }
  int UIApplicationMain(int argc, char *argv[], NSString *principalClassName, NSString *delegateClassName);
`)],-1),h=e("p",null,"argc, argv:直接传递给 UIApplicationMain 进行相关处理即可;",-1),A=e("p",null,"principalClassName:指定应用程序类名(app 象征),该类必须是 UIApplication(或子类).如果为 nil,则用 UIApplication 类作为默认值.",-1),f=e("p",null,"delegateClassName:指定应用程序的代理类,该类必须遵守 UIApplicationDelegate 协议.",-1),N=e("p",null,"UIApplicationMain 函数会根据 principalClassName 创建 UIApplication 对象,根据 delegateClassName 创建一个 delegate 对象,并将该 delegate 对象赋值给 UIApplication 对象中的 delegate 属性.",-1),C=e("p",null,"接着会建立应用程序的 Main Runloop(事件循环),进行事件的处理(首先会在程序启动完毕后调用 delegate 对象的 application:didFinishLaunchingWithOptions:方法)",-1),S=e("p",null,"程序正常退出时 UIApplicationMain 函数才返回.",-1);function E(I,U){const a=n("RouterLink");return t(),l("div",null,[_,e("p",null,[o(a,{to:"/posts/iOS/iOS%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89.html"},{default:s(()=>[p("iOS 程序启动原理（上）")]),_:1})]),d,c(" ![图](https://upload-images.jianshu.io/upload_images/2076247-1f1b30ddcfcd7ef3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) "),u,g,m,h,A,f,N,C,S])}const B=i(r,[["render",E],["__file","iOS程序启动原理（下）.html.vue"]]);export{B as default};
